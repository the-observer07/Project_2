[{"/Users/inspireadmin/Documents/GitHub/Project_2/src/index.js":"1","/Users/inspireadmin/Documents/GitHub/Project_2/src/App.js":"2","/Users/inspireadmin/Documents/GitHub/Project_2/src/component/Commodity.js":"3","/Users/inspireadmin/Documents/GitHub/Project_2/src/component/Forex.js":"4","/Users/inspireadmin/Documents/GitHub/Project_2/src/component/Crypto.js":"5","/Users/inspireadmin/Documents/GitHub/Project_2/src/component/TokenListApiData.js":"6","/Users/inspireadmin/Documents/GitHub/Project_2/src/component/TokenList.js":"7","/Users/inspireadmin/Documents/GitHub/Project_2/src/component/AggregateInput.js":"8","/Users/inspireadmin/Documents/GitHub/Project_2/src/component/CommodityList.js":"9","/Users/inspireadmin/Documents/GitHub/Project_2/src/component/ForexList.js":"10","/Users/inspireadmin/Documents/GitHub/Project_2/src/component/DataTicker.js":"11","/Users/inspireadmin/Documents/GitHub/Project_2/src/component/WatchList.js":"12"},{"size":142,"mtime":1616592305000,"results":"13","hashOfConfig":"14"},{"size":463,"mtime":1648142736325,"results":"15","hashOfConfig":"14"},{"size":2076,"mtime":1648135647125,"results":"16","hashOfConfig":"14"},{"size":11290,"mtime":1648174454302,"results":"17","hashOfConfig":"14"},{"size":1663,"mtime":1648142712150,"results":"18","hashOfConfig":"14"},{"size":845502,"mtime":1648136141302,"results":"19","hashOfConfig":"14"},{"size":1355,"mtime":1648135997422,"results":"20","hashOfConfig":"14"},{"size":2226,"mtime":1648135926471,"results":"21","hashOfConfig":"14"},{"size":238,"mtime":1648007118042,"results":"22","hashOfConfig":"14"},{"size":7155,"mtime":1648025038708,"results":"23","hashOfConfig":"14"},{"size":1904,"mtime":1648143013975,"results":"24","hashOfConfig":"14"},{"size":263,"mtime":1648131290123,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},"1as9eb2",{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"34"},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"39"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"34"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"39"},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"39"},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68"},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/inspireadmin/Documents/GitHub/Project_2/src/index.js",[],[],["72","73"],"/Users/inspireadmin/Documents/GitHub/Project_2/src/App.js",["74"],[],"import React from \"react\";\nimport DataTicker from \"./component/DataTicker\";\nimport AggregateInput from \"./component/AggregateInput\";\nimport WatchList from \"./component/WatchList\";\n\nconst App = () => {\n  return (\n    <div>\n      <DataTicker />\n      <br />\n      <br />\n      <div className=\"container\">\n        <AggregateInput />\n      </div>\n      <br />\n      <br />\n      <br />\n      <br />\n      {/* <WatchList /> */}\n    </div>\n  );\n};\n\nexport default App;\n",["75","76"],"/Users/inspireadmin/Documents/GitHub/Project_2/src/component/Commodity.js",["77","78","79","80"],[],"import React, { useState, useEffect } from \"react\";\nimport { Button, Container, Row, Col } from \"react-bootstrap\";\n\n//============================================================================================================================================================================================\n\nconst commodityList = [\n  \"RICE\",\n  \"WHEAT\",\n  \"SUGAR\",\n  \"CORN\",\n  \"WTIOIL\",\n  \"BRENTOIL\",\n  \"SOYBEAN\",\n  \"COFFEE\",\n  \"XAU\",\n  \"XAG\",\n  \"XPD\",\n  \"XPT\",\n  \"XRH\",\n  \"RUBBER\",\n  \"ETHANOL\",\n  \"CPO\",\n  \"NG\",\n];\n\nconst Commodity = (props) => {\n  const [type, setType] = useState([]);\n\n  const commodityAPI = `https://www.commodities-api.com/api/latest?access_key=jhvo01w5j98zhcbi517u32j1mc14wgkh1zwzfp8rx4x3bdzujvnvx6gzody4&base=${props.commoditySearchWord}&symbols=USD`;\n\n  const makeApiCall = async () => {\n    const res = await fetch(commodityAPI);\n    const rawData = await res.json();\n\n    const rawDataArray = [rawData];\n    const filteredData = rawDataArray.map((duck) => {\n      return {\n        price: duck.data.rates,\n        unit: duck.data.unit,\n      };\n    });\n    setType(filteredData);\n  };\n\n  const mappedData = type.map((element, index) => {\n    return (\n      <div key={index}>\n        USD : ${element.price.USD} {element.unit}\n        <br />\n      </div>\n    );\n  });\n\n  return (\n    <div>\n      <Col>\n        <br />\n        <Button onClick={makeApiCall} size=\"lg\">\n          Submit\n        </Button>\n        <br />\n        <br />\n        <div className=\"data\">{mappedData}</div>\n        {/* is propsing down to child (Result component) */}\n        <br />\n        {/* <input className=\"input-value\" placeholder=\"Input value here.\"></input> */}\n        {/* <br /> */}\n        {/* <br /> */}\n        {/* <br /> */}\n        {/* <DropdownList className=\"col\" data={props.forexArray}></DropdownList> */}\n        {/* <br /> */}\n        {/* <Button>Swap</Button> */}\n        {/* <br /> */}\n        {/* <br /> */}\n        {/* <DropdownList className=\"col\" data={props.forexArraywx}></DropdownList> */}\n      </Col>\n    </div>\n  );\n};\n\nexport default Commodity;\n",["81","82"],"/Users/inspireadmin/Documents/GitHub/Project_2/src/component/Forex.js",["83","84","85","86","87","88","89","90","91","92"],[],"import React, { useState, useEffect } from \"react\";\nimport { DropdownList, SlideTransitionGroup } from \"react-widgets/cjs\";\nimport { Button, Container, Row, Col } from \"react-bootstrap\";\n\nconst forexList = [\n  { id: \"AED\", name: \"United Arab Emirates Dirham\" },\n  { id: \"AFN\", name: \"Afghan Afghani\" },\n  { id: \"ALL\", name: \"Albanian Lek\" },\n  { id: \"AMD\", name: \"Armenian Dram\" },\n  { id: \"ANG\", name: \"Netherlands Antillean Guilder\" },\n  { id: \"AOA\", name: \"Angolan Kwanza\" },\n  { id: \"ARS\", name: \"Argentine Peso\" },\n  { id: \"AUD\", name: \"Australian Dollar\" },\n  { id: \"AWG\", name: \"Aruban Florin\" },\n  { id: \"AZN\", name: \"Azerbaijani Manat\" },\n  { id: \"BAM\", name: \"Bosnia-Herzegovina Convertible Mark\" },\n  { id: \"BBD\", name: \"Barbadian Dollar\" },\n  { id: \"BDT\", name: \"Bangladeshi Taka\" },\n  { id: \"BGN\", name: \"Bulgarian Lev\" },\n  { id: \"BHD\", name: \"Bahraini Dinar\" },\n  { id: \"BIF\", name: \"Burundian Franc\" },\n  { id: \"BMD\", name: \"Bermudan Dollar\" },\n  { id: \"BND\", name: \"Brunei Dollar\" },\n  { id: \"BOB\", name: \"Bolivian Boliviano\" },\n  { id: \"BRL\", name: \"Brazilian Real\" },\n  { id: \"BSD\", name: \"Bahamian Dollar\" },\n  { id: \"BTC\", name: \"Bitcoin\" },\n  { id: \"BTN\", name: \"Bhutanese Ngultrum\" },\n  { id: \"BWP\", name: \"Botswanan Pula\" },\n  { id: \"BYR\", name: \"Belarusian Ruble\" },\n  { id: \"BZD\", name: \"Belize Dollar\" },\n  { id: \"CAD\", name: \"Canadian Dollar\" },\n  { id: \"CDF\", name: \"Congolese Franc\" },\n  { id: \"CHF\", name: \"Swiss Franc\" },\n  { id: \"CLF\", name: \"Chilean Unit of Account (UF)\" },\n  { id: \"CLP\", name: \"Chilean Peso\" },\n  { id: \"CNY\", name: \"Chinese Yuan\" },\n  { id: \"COP\", name: \"Colombian Peso\" },\n  { id: \"CRC\", name: \"Costa Rican Col√≥n\" },\n  { id: \"CUC\", name: \"Cuban Convertible Peso\" },\n  { id: \"CUP\", name: \"Cuban Peso\" },\n  { id: \"CVE\", name: \"Cape Verdean Escudo\" },\n  { id: \"CZK\", name: \"Czech Republic Koruna\" },\n  { id: \"DJF\", name: \"Djiboutian Franc\" },\n  { id: \"DKK\", name: \"Danish Krone\" },\n  { id: \"DOP\", name: \"Dominican Peso\" },\n  { id: \"DZD\", name: \"Algerian Dinar\" },\n  { id: \"EGP\", name: \"Egyptian Pound\" },\n  { id: \"ERN\", name: \"Eritrean Nakfa\" },\n  { id: \"ETB\", name: \"Ethiopian Birr\" },\n  { id: \"EUR\", name: \"Euro\" },\n  { id: \"FJD\", name: \"Fijian Dollar\" },\n  { id: \"FKP\", name: \"Falkland Islands Pound\" },\n  { id: \"GBP\", name: \"British Pound Sterling\" },\n  { id: \"GEL\", name: \"Georgian Lari\" },\n  { id: \"GGP\", name: \"Guernsey Pound\" },\n  { id: \"GHS\", name: \"Ghanaian Cedi\" },\n  { id: \"GIP\", name: \"Gibraltar Pound\" },\n  { id: \"GMD\", name: \"Gambian Dalasi\" },\n  { id: \"GNF\", name: \"Guinean Franc\" },\n  { id: \"GTQ\", name: \"Guatemalan Quetzal\" },\n  { id: \"GYD\", name: \"Guyanaese Dollar\" },\n  { id: \"HKD\", name: \"Hong Kong Dollar\" },\n  { id: \"HNL\", name: \"Honduran Lempira\" },\n  { id: \"HRK\", name: \"Croatian Kuna\" },\n  { id: \"HTG\", name: \"Haitian Gourde\" },\n  { id: \"HUF\", name: \"Hungarian Forint\" },\n  { id: \"IDR\", name: \"Indonesian Rupiah\" },\n  { id: \"ILS\", name: \"Israeli New Sheqel\" },\n  { id: \"IMP\", name: \"Manx pound\" },\n  { id: \"INR\", name: \"Indian Rupee\" },\n  { id: \"IQD\", name: \"Iraqi Dinar\" },\n  { id: \"IRR\", name: \"Iranian Rial\" },\n  { id: \"ISK\", name: \"Icelandic Kr√≥na\" },\n  { id: \"JEP\", name: \"Jersey Pound\" },\n  { id: \"JMD\", name: \"Jamaican Dollar\" },\n  { id: \"JOD\", name: \"Jordanian Dinar\" },\n  { id: \"JPY\", name: \"Japanese Yen\" },\n  { id: \"KES\", name: \"Kenyan Shilling\" },\n  { id: \"KGS\", name: \"Kyrgystani Som\" },\n  { id: \"KHR\", name: \"Cambodian Riel\" },\n  { id: \"KMF\", name: \"Comorian Franc\" },\n  { id: \"KPW\", name: \"North Korean Won\" },\n  { id: \"KRW\", name: \"South Korean Won\" },\n  { id: \"KWD\", name: \"Kuwaiti Dinar\" },\n  { id: \"KYD\", name: \"Cayman Islands Dollar\" },\n  { id: \"KZT\", name: \"Kazakhstani Tenge\" },\n  { id: \"LAK\", name: \"Laotian Kip\" },\n  { id: \"LBP\", name: \"Lebanese Pound\" },\n  { id: \"LKR\", name: \"Sri Lankan Rupee\" },\n  { id: \"LRD\", name: \"Liberian Dollar\" },\n  { id: \"LSL\", name: \"Lesotho Loti\" },\n  { id: \"LTL\", name: \"Lithuanian Litas\" },\n  { id: \"LVL\", name: \"Latvian Lats\" },\n  { id: \"LYD\", name: \"Libyan Dinar\" },\n  { id: \"MAD\", name: \"Moroccan Dirham\" },\n  { id: \"MDL\", name: \"Moldovan Leu\" },\n  { id: \"MGA\", name: \"Malagasy Ariary\" },\n  { id: \"MKD\", name: \"Macedonian Denar\" },\n  { id: \"MMK\", name: \"Myanma Kyat\" },\n  { id: \"MNT\", name: \"Mongolian Tugrik\" },\n  { id: \"MOP\", name: \"Macanese Pataca\" },\n  { id: \"MRO\", name: \"Mauritanian Ouguiya\" },\n  { id: \"MUR\", name: \"Mauritian Rupee\" },\n  { id: \"MVR\", name: \"Maldivian Rufiyaa\" },\n  { id: \"MWK\", name: \"Malawian Kwacha\" },\n  { id: \"MXN\", name: \"Mexican Peso\" },\n  { id: \"MYR\", name: \"Malaysian Ringgit\" },\n  { id: \"MZN\", name: \"Mozambican Metical\" },\n  { id: \"NAD\", name: \"Namibian Dollar\" },\n  { id: \"NGN\", name: \"Nigerian Naira\" },\n  { id: \"NIO\", name: \"Nicaraguan C√≥rdoba\" },\n  { id: \"NOK\", name: \"Norwegian Krone\" },\n  { id: \"NPR\", name: \"Nepalese Rupee\" },\n  { id: \"NZD\", name: \"New Zealand Dollar\" },\n  { id: \"OMR\", name: \"Omani Rial\" },\n  { id: \"PAB\", name: \"Panamanian Balboa\" },\n  { id: \"PEN\", name: \"Peruvian Nuevo Sol\" },\n  { id: \"PGK\", name: \"Papua New Guinean Kina\" },\n  { id: \"PHP\", name: \"Philippine Peso\" },\n  { id: \"PKR\", name: \"Pakistani Rupee\" },\n  { id: \"PLN\", name: \"Polish Zloty\" },\n  { id: \"PYG\", name: \"Paraguayan Guarani\" },\n  { id: \"QAR\", name: \"Qatari Rial\" },\n  { id: \"RON\", name: \"Romanian Leu\" },\n  { id: \"RSD\", name: \"Serbian Dinar\" },\n  { id: \"RUB\", name: \"Russian Ruble\" },\n  { id: \"RWF\", name: \"Rwandan Franc\" },\n  { id: \"SAR\", name: \"Saudi Riyal\" },\n  { id: \"SBD\", name: \"Solomon Islands Dollar\" },\n  { id: \"SCR\", name: \"Seychellois Rupee\" },\n  { id: \"SDG\", name: \"Sudanese Pound\" },\n  { id: \"SEK\", name: \"Swedish Krona\" },\n  { id: \"SGD\", name: \"Singapore Dollar\" },\n  { id: \"SHP\", name: \"Saint Helena Pound\" },\n  { id: \"SLL\", name: \"Sierra Leonean Leone\" },\n  { id: \"SOS\", name: \"Somali Shilling\" },\n  { id: \"SRD\", name: \"Surinamese Dollar\" },\n  { id: \"STD\", name: \"S√£o Tom√© and Pr√≠ncipe Dobra\" },\n  { id: \"SVC\", name: \"Salvadoran Col√≥n\" },\n  { id: \"SYP\", name: \"Syrian Pound\" },\n  { id: \"SZL\", name: \"Swazi Lilangeni\" },\n  { id: \"THB\", name: \"Thai Baht\" },\n  { id: \"TJS\", name: \"Tajikistani Somoni\" },\n  { id: \"TMT\", name: \"Turkmenistani Manat\" },\n  { id: \"TND\", name: \"Tunisian Dinar\" },\n  { id: \"TOP\", name: \"Tongan Pa ªanga\" },\n  { id: \"TRY\", name: \"Turkish Lira\" },\n  { id: \"TTD\", name: \"Trinidad and Tobago Dollar\" },\n  { id: \"TWD\", name: \"New Taiwan Dollar\" },\n  { id: \"TZS\", name: \"Tanzanian Shilling\" },\n  { id: \"UAH\", name: \"Ukrainian Hryvnia\" },\n  { id: \"UGX\", name: \"Ugandan Shilling\" },\n  { id: \"USD\", name: \"United States Dollar\" },\n  { id: \"UYU\", name: \"Uruguayan Peso\" },\n  { id: \"UZS\", name: \"Uzbekistan Som\" },\n  { id: \"VEF\", name: \"Venezuelan Bol√≠var Fuerte\" },\n  { id: \"VND\", name: \"Vietnamese Dong\" },\n  { id: \"VUV\", name: \"Vanuatu Vatu\" },\n  { id: \"WST\", name: \"Samoan Tala\" },\n  { id: \"XAF\", name: \"CFA Franc BEAC\" },\n  { id: \"XAG\", name: \"Silver (troy ounce)\" },\n  { id: \"XAU\", name: \"Gold (troy ounce)\" },\n  { id: \"XCD\", name: \"East Caribbean Dollar\" },\n  { id: \"XDR\", name: \"Special Drawing Rights\" },\n  { id: \"XOF\", name: \"CFA Franc BCEAO\" },\n  { id: \"XPF\", name: \"CFP Franc\" },\n  { id: \"YER\", name: \"Yemeni Rial\" },\n  { id: \"ZAR\", name: \"South African Rand\" },\n  { id: \"ZMK\", name: \"Zambian Kwacha (pre-2013)\" },\n  { id: \"ZMW\", name: \"Zambian Kwacha\" },\n  { id: \"ZWL\", name: \"Zimbabwean Dollar\" },\n];\n\nconst Forex = (props) => {\n  const [forex, setForex] = useState(\"1\");\n  const [forexType, setForexType] = useState([]);\n  const [filterData, setFilterData] = useState(\"\");\n  const [numericalInput, setNumericalInput] = useState(\"1\");\n  const [secondaryInput, setSecondaryInput] = useState(\"USD\");\n  const [secondaryAPIData, setSecondaryAPIData] = useState(\"1\");\n  const [result, setResult] = useState(1);\n  const [content, setContent] = useState(\"\");\n\n  const forexAPI = `http://apilayer.net/api/live?access_key=b7bf0fb87af0b9ef3ff79b78a423f76c&currencies=${filterData}&source=USD&format=1`;\n  const secondaryForexAPI = `http://apilayer.net/api/live?access_key=b7bf0fb87af0b9ef3ff79b78a423f76c&currencies=${secondaryInput}&source=USD&format=1`;\n\n  const sortForex = () => {\n    const sortByName = forexList.map((chicken) => {\n      return {\n        name: chicken.name,\n      };\n    });\n    setForexType(sortByName);\n  };\n\n  useEffect(() => {\n    sortForex();\n  }, []);\n\n  const emptyArray = [];\n\n  const displayName = forexType.map((chicken) => {\n    return emptyArray.push(chicken.name);\n  });\n\n  useEffect(() => {\n    getResults();\n  }, [props.forexState]);\n\n  const getResults = () => {\n    const searchWord = props.forexSearchWord;\n    const newFilter = Object.keys(forexList).reduce((result, key) => {\n      if (forexList[key].name.includes(searchWord)) {\n        result = forexList[key].id;\n      }\n      return result;\n    }, \"\");\n    setFilterData(newFilter);\n\n    setTimeout(() => {\n      makeApiCall(newFilter);\n    }, 1000);\n\n    const makeApiCall = async (input) => {\n      const url = `http://apilayer.net/api/live?access_key=b7bf0fb87af0b9ef3ff79b78a423f76c&currencies=${input}&source=USD&format=1`;\n      const res = await fetch(url);\n      const rawData = await res.json();\n      setForex(rawData.quotes);\n      console.log(rawData.quotes);\n    };\n  };\n\n  const forexArray = forex;\n\n  const handleEventChange = (event) => {\n    setNumericalInput(event.target.value);\n  };\n\n  const handleSecondaryValueChange = (event) => {\n    let searchWord = event;\n    const newFilter = Object.keys(forexList).reduce((result, key) => {\n      if (forexList[key].name.includes(searchWord)) {\n        result = forexList[key].id;\n      }\n      return result;\n    }, \"\");\n    setSecondaryInput(newFilter);\n\n    setTimeout(() => {\n      makeSecondaryApiCall(newFilter);\n    }, 1000);\n\n    const makeSecondaryApiCall = async (input) => {\n      const url = `http://apilayer.net/api/live?access_key=b7bf0fb87af0b9ef3ff79b78a423f76c&currencies=${input}&source=USD&format=1`;\n      const res = await fetch(url);\n      const rawData = await res.json();\n      setSecondaryAPIData(rawData.quotes);\n      console.log(rawData.quotes);\n    };\n  };\n\n  const onSubmit = () => {\n    if (secondaryAPIData !== \"undefined\") {\n      console.log(secondaryAPIData !== \"undefined\");\n      setSecondaryAPIData(\"1\");\n      let num1 = parseInt(\"1\");\n      let num2 = parseInt(numericalInput);\n      let num3 = Object.values(forex)[0];\n      console.log(num1, num2, num3);\n      const ratio = (num3 / num1) * num2;\n      setResult(ratio);\n      console.log(ratio);\n      let rounded = ratio.toFixed(2);\n\n      setContent(\n        <p>\n          ${numericalInput} {secondaryInput} = ${rounded} {filterData}\n        </p>\n      );\n    }\n  };\n\n  return (\n    <div>\n      <Button size=\"lg\" onClick={onSubmit}>\n        Submit\n      </Button>{\" \"}\n      <br />\n      <br />\n      <div className=\"value\">\n        Value $\n        <input\n          className=\"inputValue\"\n          type=\"number\"\n          placeholder=\"Input value\"\n          onChange={handleEventChange}\n          defaultValue=\"1\"\n        ></input>\n      </div>\n      <br />\n      <DropdownList\n        data={emptyArray}\n        defaultValue=\"United States Dollar\"\n        onChange={handleSecondaryValueChange}\n      ></DropdownList>\n      <br />\n      <div className=\"result\">{content}</div>\n      <br />\n    </div>\n  );\n};\n\nexport default Forex;\n","/Users/inspireadmin/Documents/GitHub/Project_2/src/component/Crypto.js",["93","94","95","96","97"],[],"import React, { useState, useEffect } from \"react\";\n\nimport tokenList from \"./TokenListApiData\";\nimport { Button, Container, Row, Col } from \"react-bootstrap\";\n// import AggregateInput from \"./AggregateInput\";\n\nconst Crypto = (props) => {\n  const [filterData, setFilterData] = useState(\"\");\n  const [tokenPrice, setTokenPrice] = useState([]);\n  const [extractedData, setExtractedData] = useState(\"\");\n\n  const cryptoAPIQuery = `https://api.coingecko.com/api/v3/simple/price?ids=${filterData}&vs_currencies=USD`;\n\n  useEffect(() => {\n    getResults();\n  }, [props.cryptoState]);\n\n  const getResults = () => {\n    const searchWord = props.searchWord;\n    console.log(searchWord);\n    const newFilter = Object.keys(tokenList).reduce((result, key) => {\n      if (tokenList[key].name.match(searchWord)) {\n        result = tokenList[key].id;\n      }\n\n      return result;\n    }, \"\");\n    setFilterData(newFilter);\n    console.log(newFilter);\n  };\n\n  const makeApiCall = async () => {\n    const res = await fetch(cryptoAPIQuery);\n    const rawData = await res.json();\n\n    setTokenPrice(rawData);\n    console.log(rawData);\n\n    const tokenPriceArray = [rawData];\n    const obj1 = tokenPriceArray[0];\n    console.log(obj1);\n\n    const obj2 = obj1[Object.keys(obj1)[0]];\n    console.log(obj2);\n\n    const value = obj2[Object.keys(obj2)[0]];\n    console.log(value);\n    setExtractedData(value);\n  };\n\n  return (\n    <div>\n      <br />\n      <Button onClick={makeApiCall} size=\"lg\">\n        Submit\n      </Button>\n      <br />\n      <br />\n      <br />\n      <div className=\"data\">Token price : ${extractedData}</div>\n      <br />\n    </div>\n  );\n};\n\nexport default Crypto;\n","/Users/inspireadmin/Documents/GitHub/Project_2/src/component/TokenListApiData.js",[],[],"/Users/inspireadmin/Documents/GitHub/Project_2/src/component/TokenList.js",["98","99","100","101"],[],"import React, { useEffect, useState } from \"react\";\nimport Bottleneck from \"bottleneck\";\n\nconst TokenList = (props) => {\n  const [data, setData] = useState([]);\n  const [type, setType] = useState([]);\n\n  const tickerData = \"https://api.coingecko.com/api/v3/exchanges/binance\";\n\n  const limiter = new Bottleneck({\n    reservoir: 100, // initial value\n    reservoirRefreshAmount: 100,\n    reservoirRefreshInterval: 60 * 500,\n\n    // also use maxConcurrent and/or minTime for safety\n    maxConcurrent: 1,\n    minTime: 333, // pick a value that makes sense for your use case\n  });\n\n  const makeApiCall = async () => {\n    const res = await fetch(tickerData);\n    const rawData = await res.json();\n    setData(rawData.tickers);\n    const filteredData = rawData.tickers.map((duck) => {\n      return {\n        id: duck.base,\n        price: duck.last,\n      };\n    });\n\n    setType(filteredData);\n    const emptyArray = [];\n    const getId = filteredData.map((chicken) => {\n      return emptyArray.push(chicken.id);\n    });\n\n    props.setId(emptyArray);\n  };\n\n  const throttledApiCall = limiter.wrap(makeApiCall);\n\n  useEffect(() => {\n    throttledApiCall();\n    makeApiCall();\n  }, []);\n\n  const cryptoIdArray = [];\n  const displayId = type.map((chicken) => {\n    return cryptoIdArray.push(chicken.id);\n  });\n\n  return <div></div>;\n};\n\nexport default TokenList;\n","/Users/inspireadmin/Documents/GitHub/Project_2/src/component/AggregateInput.js",["102","103","104","105","106","107","108","109"],[],"import React, { useState } from \"react\";\nimport commodityList from \"./CommodityList\";\nimport forexList from \"./ForexList\";\nimport { DropdownList } from \"react-widgets/cjs\";\nimport TokenList from \"./TokenList\";\nimport Crypto from \"./Crypto\";\nimport Forex from \"./Forex\";\nimport Commodity from \"./Commodity\";\n\nconst AggregateInput = (props) => {\n  const forexNameArray = [];\n  const forexName = forexList.map((chicken) => {\n    return forexNameArray.push(chicken.name);\n  });\n\n  const [id, setId] = useState([]);\n  const [aggregatedSearch, setAggregatedSearch] = useState(\"\");\n  const [content, setContent] = useState(\"\");\n  const [forexState, setForexState] = useState(false);\n  const [cryptoState, setCryptoState] = useState(false);\n  const [input, setInput] = useState(\"\");\n\n  const aggregatedArray = [];\n\n  const mergeForex = forexNameArray.map((chicken) => {\n    return aggregatedArray.push(chicken);\n  });\n\n  const mergeCrypto = id.map((chicken) => {\n    return aggregatedArray.push(chicken);\n  });\n\n  const mergeCommodity = commodityList.map((chicken) => {\n    return aggregatedArray.push(chicken);\n  });\n\n  const handleSearchAggregate = (event) => {\n    const searchWord = event;\n\n    if (commodityList.indexOf(searchWord) !== -1) {\n      setContent(<Commodity commoditySearchWord={searchWord} />);\n    } else if (\n      forexList.find((element) => element.name === searchWord) !== undefined\n    ) {\n      setContent(\n        <Forex\n          forexSearchWord={searchWord}\n          forexState={forexState}\n          setForexState={setForexState}\n        />\n      );\n    } else {\n      setContent(\n        <Crypto\n          searchWord={searchWord}\n          cryptoState={cryptoState}\n          setCryptoState={setCryptoState}\n        />\n      );\n    }\n  };\n\n  return (\n    <div>\n      <div className=\"int-container\">\n        <div className=\"holder\">\n          <br />\n          <h2 className=\"header\">QUERY YOUR MOONSHOT</h2>\n          <br />\n          <DropdownList\n            data={aggregatedArray}\n            onChange={handleSearchAggregate}\n          />\n          <br />\n          <TokenList id={id} setId={setId} />\n          {content}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AggregateInput;\n","/Users/inspireadmin/Documents/GitHub/Project_2/src/component/CommodityList.js",[],[],"/Users/inspireadmin/Documents/GitHub/Project_2/src/component/ForexList.js",[],[],"/Users/inspireadmin/Documents/GitHub/Project_2/src/component/DataTicker.js",["110"],[],"import React, { useState, useEffect, Component } from \"react\";\nimport Ticker, { FinancialTicker, NewsTicker } from \"nice-react-ticker\";\n\nconst DataTicker = () => {\n  const [cryptoData, setCryptoData] = useState([]);\n  const [newsData, setNewsData] = useState(\"\");\n\n  const cryptoApiTicker = \"https://api.coingecko.com/api/v3/exchanges/binance\";\n  const financialNewsTicker =\n    \"https://api.marketaux.com/v1/news/all?symbols=TSLA,GME,AMC&filter_entities=true&language=en&api_token=WMIGwTBG1aEbYNV6vYbrBbu8TXB4R0mAXH1Zu5tU\";\n\n  useEffect(() => {\n    fetchFinancialNewsAPI();\n    fetchCryptoAPI();\n    setInterval(() => {\n      fetchCryptoAPI();\n    }, 10000);\n  }, []);\n\n  const fetchCryptoAPI = async () => {\n    const res = await fetch(cryptoApiTicker);\n    const rawData = await res.json();\n    let sevenData = rawData.tickers;\n    const firstSeven = sevenData.filter((element, index) => index < 9);\n    const filteredData = firstSeven.map((element, index) => {\n      return (\n        <FinancialTicker\n          id={index}\n          change={true}\n          symbol={element.base}\n          lastPrice={element.converted_last.usd}\n          currentPrice={element.last}\n        />\n      );\n    });\n    setCryptoData(filteredData);\n  };\n\n  const fetchFinancialNewsAPI = async () => {\n    const res = await fetch(financialNewsTicker);\n    const rawData = await res.json();\n    const financialMappedData = rawData.data.map((element, index) => {\n      return (\n        <NewsTicker\n          id={index}\n          icon={element.image_url}\n          title={element.title}\n          url={element.url}\n        />\n      );\n    });\n    setNewsData(financialMappedData);\n  };\n\n  return (\n    <div>\n      <Ticker className=\"tickerItemFinancial\">{cryptoData}</Ticker>\n      <div className=\"newsticker\">\n        <Ticker isNewsTicker={true}>{newsData}</Ticker>\n      </div>\n    </div>\n  );\n};\n\nexport default DataTicker;\n","/Users/inspireadmin/Documents/GitHub/Project_2/src/component/WatchList.js",[],[],{"ruleId":"111","replacedBy":"112"},{"ruleId":"113","replacedBy":"114"},{"ruleId":"115","severity":1,"message":"116","line":4,"column":8,"nodeType":"117","messageId":"118","endLine":4,"endColumn":17},{"ruleId":"111","replacedBy":"119"},{"ruleId":"113","replacedBy":"120"},{"ruleId":"115","severity":1,"message":"121","line":1,"column":27,"nodeType":"117","messageId":"118","endLine":1,"endColumn":36},{"ruleId":"115","severity":1,"message":"122","line":2,"column":18,"nodeType":"117","messageId":"118","endLine":2,"endColumn":27},{"ruleId":"115","severity":1,"message":"123","line":2,"column":29,"nodeType":"117","messageId":"118","endLine":2,"endColumn":32},{"ruleId":"115","severity":1,"message":"124","line":6,"column":7,"nodeType":"117","messageId":"118","endLine":6,"endColumn":20},{"ruleId":"111","replacedBy":"125"},{"ruleId":"113","replacedBy":"126"},{"ruleId":"115","severity":1,"message":"127","line":2,"column":24,"nodeType":"117","messageId":"118","endLine":2,"endColumn":44},{"ruleId":"115","severity":1,"message":"122","line":3,"column":18,"nodeType":"117","messageId":"118","endLine":3,"endColumn":27},{"ruleId":"115","severity":1,"message":"123","line":3,"column":29,"nodeType":"117","messageId":"118","endLine":3,"endColumn":32},{"ruleId":"115","severity":1,"message":"128","line":3,"column":34,"nodeType":"117","messageId":"118","endLine":3,"endColumn":37},{"ruleId":"115","severity":1,"message":"129","line":182,"column":10,"nodeType":"117","messageId":"118","endLine":182,"endColumn":16},{"ruleId":"115","severity":1,"message":"130","line":185,"column":9,"nodeType":"117","messageId":"118","endLine":185,"endColumn":17},{"ruleId":"115","severity":1,"message":"131","line":186,"column":9,"nodeType":"117","messageId":"118","endLine":186,"endColumn":26},{"ruleId":"115","severity":1,"message":"132","line":203,"column":9,"nodeType":"117","messageId":"118","endLine":203,"endColumn":20},{"ruleId":"133","severity":1,"message":"134","line":209,"column":6,"nodeType":"135","endLine":209,"endColumn":24,"suggestions":"136"},{"ruleId":"115","severity":1,"message":"137","line":234,"column":9,"nodeType":"117","messageId":"118","endLine":234,"endColumn":19},{"ruleId":"115","severity":1,"message":"122","line":4,"column":18,"nodeType":"117","messageId":"118","endLine":4,"endColumn":27},{"ruleId":"115","severity":1,"message":"123","line":4,"column":29,"nodeType":"117","messageId":"118","endLine":4,"endColumn":32},{"ruleId":"115","severity":1,"message":"128","line":4,"column":34,"nodeType":"117","messageId":"118","endLine":4,"endColumn":37},{"ruleId":"115","severity":1,"message":"138","line":9,"column":10,"nodeType":"117","messageId":"118","endLine":9,"endColumn":20},{"ruleId":"133","severity":1,"message":"134","line":16,"column":6,"nodeType":"135","endLine":16,"endColumn":25,"suggestions":"139"},{"ruleId":"115","severity":1,"message":"140","line":5,"column":10,"nodeType":"117","messageId":"118","endLine":5,"endColumn":14},{"ruleId":"115","severity":1,"message":"141","line":33,"column":11,"nodeType":"117","messageId":"118","endLine":33,"endColumn":16},{"ruleId":"133","severity":1,"message":"142","line":45,"column":6,"nodeType":"135","endLine":45,"endColumn":8,"suggestions":"143"},{"ruleId":"115","severity":1,"message":"144","line":48,"column":9,"nodeType":"117","messageId":"118","endLine":48,"endColumn":18},{"ruleId":"115","severity":1,"message":"145","line":12,"column":9,"nodeType":"117","messageId":"118","endLine":12,"endColumn":18},{"ruleId":"115","severity":1,"message":"146","line":17,"column":10,"nodeType":"117","messageId":"118","endLine":17,"endColumn":26},{"ruleId":"115","severity":1,"message":"147","line":17,"column":28,"nodeType":"117","messageId":"118","endLine":17,"endColumn":47},{"ruleId":"115","severity":1,"message":"148","line":21,"column":10,"nodeType":"117","messageId":"118","endLine":21,"endColumn":15},{"ruleId":"115","severity":1,"message":"149","line":21,"column":17,"nodeType":"117","messageId":"118","endLine":21,"endColumn":25},{"ruleId":"115","severity":1,"message":"150","line":25,"column":9,"nodeType":"117","messageId":"118","endLine":25,"endColumn":19},{"ruleId":"115","severity":1,"message":"151","line":29,"column":9,"nodeType":"117","messageId":"118","endLine":29,"endColumn":20},{"ruleId":"115","severity":1,"message":"152","line":33,"column":9,"nodeType":"117","messageId":"118","endLine":33,"endColumn":23},{"ruleId":"115","severity":1,"message":"153","line":1,"column":38,"nodeType":"117","messageId":"118","endLine":1,"endColumn":47},"no-native-reassign",["154"],"no-negated-in-lhs",["155"],"no-unused-vars","'WatchList' is defined but never used.","Identifier","unusedVar",["154"],["155"],"'useEffect' is defined but never used.","'Container' is defined but never used.","'Row' is defined but never used.","'commodityList' is assigned a value but never used.",["154"],["155"],"'SlideTransitionGroup' is defined but never used.","'Col' is defined but never used.","'result' is assigned a value but never used.","'forexAPI' is assigned a value but never used.","'secondaryForexAPI' is assigned a value but never used.","'displayName' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getResults'. Either include it or remove the dependency array.","ArrayExpression",["156"],"'forexArray' is assigned a value but never used.","'tokenPrice' is assigned a value but never used.",["157"],"'data' is assigned a value but never used.","'getId' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'makeApiCall' and 'throttledApiCall'. Either include them or remove the dependency array.",["158"],"'displayId' is assigned a value but never used.","'forexName' is assigned a value but never used.","'aggregatedSearch' is assigned a value but never used.","'setAggregatedSearch' is assigned a value but never used.","'input' is assigned a value but never used.","'setInput' is assigned a value but never used.","'mergeForex' is assigned a value but never used.","'mergeCrypto' is assigned a value but never used.","'mergeCommodity' is assigned a value but never used.","'Component' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"159","fix":"160"},{"desc":"161","fix":"162"},{"desc":"163","fix":"164"},"Update the dependencies array to be: [getResults, props.forexState]",{"range":"165","text":"166"},"Update the dependencies array to be: [getResults, props.cryptoState]",{"range":"167","text":"168"},"Update the dependencies array to be: [makeApiCall, throttledApiCall]",{"range":"169","text":"170"},[8446,8464],"[getResults, props.forexState]",[556,575],"[getResults, props.cryptoState]",[1175,1177],"[makeApiCall, throttledApiCall]"]