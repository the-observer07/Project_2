[{"/Users/inspireadmin/Documents/GitHub/Project_2/src/index.js":"1","/Users/inspireadmin/Documents/GitHub/Project_2/src/App.js":"2","/Users/inspireadmin/Documents/GitHub/Project_2/src/component/Commodity.js":"3","/Users/inspireadmin/Documents/GitHub/Project_2/src/component/Result.js":"4","/Users/inspireadmin/Documents/GitHub/Project_2/src/component/Forex.js":"5","/Users/inspireadmin/Documents/GitHub/Project_2/src/component/Crypto.js":"6","/Users/inspireadmin/Documents/GitHub/Project_2/src/component/TokenListApiData.js":"7","/Users/inspireadmin/Documents/GitHub/Project_2/src/component/CryptoTicker.js":"8","/Users/inspireadmin/Documents/GitHub/Project_2/src/component/TokenList.js":"9"},{"size":142,"mtime":1616592305000,"results":"10","hashOfConfig":"11"},{"size":657,"mtime":1648004375953,"results":"12","hashOfConfig":"11"},{"size":2222,"mtime":1648002452454,"results":"13","hashOfConfig":"11"},{"size":410,"mtime":1647876759050,"results":"14","hashOfConfig":"11"},{"size":10414,"mtime":1647935803199,"results":"15","hashOfConfig":"11"},{"size":3052,"mtime":1648004406945,"results":"16","hashOfConfig":"11"},{"size":879971,"mtime":1647931287181,"results":"17","hashOfConfig":"11"},{"size":2457,"mtime":1648004395762,"results":"18","hashOfConfig":"11"},{"size":1446,"mtime":1648005498608,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},"1as9eb2",{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"27"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"39"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"27"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"27"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54"},"/Users/inspireadmin/Documents/GitHub/Project_2/src/index.js",[],[],["55","56"],"/Users/inspireadmin/Documents/GitHub/Project_2/src/App.js",[],[],["57","58"],"/Users/inspireadmin/Documents/GitHub/Project_2/src/component/Commodity.js",["59","60","61","62"],[],"import React, { useState, useEffect } from \"react\";\nimport { DropdownList } from \"react-widgets/cjs\";\nimport Result from \"./Result\";\n\n//============================================================================================================================================================================================\n\nconst commodityList = [\n  \"RICE\",\n  \"WHEAT\",\n  \"SUGAR\",\n  \"CORN\",\n  \"WTIOIL\",\n  \"BRENTOIL\",\n  \"SOYBEAN\",\n  \"COFFEE\",\n  \"XAU\",\n  \"XAG\",\n  \"XPD\",\n  \"XPT\",\n  \"XRH\",\n  \"RUBBER\",\n  \"ETHANOL\",\n  \"CPO\",\n  \"NG\",\n];\n\nconst Commodity = () => {\n  const [commodity, setCommodity] = useState(\"\");\n  const [query, setQuery] = useState([]);\n  const [type, setType] = useState([]);\n\n  // CommodityAPI\n\n  const commodityAPI = `https://www.commodities-api.com/api/latest?access_key=jhvo01w5j98zhcbi517u32j1mc14wgkh1zwzfp8rx4x3bdzujvnvx6gzody4&base=${query}&symbols=USD`;\n\n  //CryptoAPI\n\n  // const cryptoAPI = ``;\n\n  //Need to consolidate API to decide which to call (if this then that)\n  //Maybe using state, so if state change then select that one?\n\n  //map the forex array to sort names\n\n  // thinking maybe i can consolidate the api keywords under consolidatedAPI so that i can do an if, else\n\n  const consolidatedAPI = ``;\n\n  // console.log(commodityAPI);\n\n  const makeApiCall = async () => {\n    const res = await fetch(commodityAPI);\n    const rawData = await res.json();\n\n    // console.log(rawData);\n\n    const rawDataArray = [rawData];\n\n    // console.log(rawDataArray);\n\n    const filteredData = rawDataArray.map((duck) => {\n      return {\n        price: duck.data.rates,\n        unit: duck.data.unit,\n      };\n    });\n    setType(filteredData);\n  };\n  // console.log(type);\n\n  const handleSelectionChange = (event) => {\n    setCommodity(event.target.value);\n    // console.log(event);\n  };\n\n  return (\n    <div>\n      <h2>Select a commodity</h2>\n      <DropdownList\n        data={commodityList}\n        // forex={forexList}\n        onChange={(nextValue) => setQuery(nextValue)}\n      />\n      <button onClick={makeApiCall}>Submit</button>\n      {/* <p>{query}</p> */}\n      <Result type={type} />\n      {/* is propsing down to child (Result component) */}\n    </div>\n  );\n};\n\nexport default Commodity;\n","/Users/inspireadmin/Documents/GitHub/Project_2/src/component/Result.js",[],[],"/Users/inspireadmin/Documents/GitHub/Project_2/src/component/Forex.js",["63","64","65","66"],[],"import React, { useState, useEffect } from \"react\";\nimport { DropdownList } from \"react-widgets/cjs\";\nimport Result from \"./Result\";\n\nconst forexList = [\n  { id: \"AED\", name: \"United Arab Emirates Dirham\" },\n  { id: \"AFN\", name: \"Afghan Afghani\" },\n  { id: \"ALL\", name: \"Albanian Lek\" },\n  { id: \"AMD\", name: \"Armenian Dram\" },\n  { id: \"ANG\", name: \"Netherlands Antillean Guilder\" },\n  { id: \"AOA\", name: \"Angolan Kwanza\" },\n  { id: \"ARS\", name: \"Argentine Peso\" },\n  { id: \"AUD\", name: \"Australian Dollar\" },\n  { id: \"AWG\", name: \"Aruban Florin\" },\n  { id: \"AZN\", name: \"Azerbaijani Manat\" },\n  { id: \"BAM\", name: \"Bosnia-Herzegovina Convertible Mark\" },\n  { id: \"BBD\", name: \"Barbadian Dollar\" },\n  { id: \"BDT\", name: \"Bangladeshi Taka\" },\n  { id: \"BGN\", name: \"Bulgarian Lev\" },\n  { id: \"BHD\", name: \"Bahraini Dinar\" },\n  { id: \"BIF\", name: \"Burundian Franc\" },\n  { id: \"BMD\", name: \"Bermudan Dollar\" },\n  { id: \"BND\", name: \"Brunei Dollar\" },\n  { id: \"BOB\", name: \"Bolivian Boliviano\" },\n  { id: \"BRL\", name: \"Brazilian Real\" },\n  { id: \"BSD\", name: \"Bahamian Dollar\" },\n  { id: \"BTC\", name: \"Bitcoin\" },\n  { id: \"BTN\", name: \"Bhutanese Ngultrum\" },\n  { id: \"BWP\", name: \"Botswanan Pula\" },\n  { id: \"BYR\", name: \"Belarusian Ruble\" },\n  { id: \"BZD\", name: \"Belize Dollar\" },\n  { id: \"CAD\", name: \"Canadian Dollar\" },\n  { id: \"CDF\", name: \"Congolese Franc\" },\n  { id: \"CHF\", name: \"Swiss Franc\" },\n  { id: \"CLF\", name: \"Chilean Unit of Account (UF)\" },\n  { id: \"CLP\", name: \"Chilean Peso\" },\n  { id: \"CNY\", name: \"Chinese Yuan\" },\n  { id: \"COP\", name: \"Colombian Peso\" },\n  { id: \"CRC\", name: \"Costa Rican Colón\" },\n  { id: \"CUC\", name: \"Cuban Convertible Peso\" },\n  { id: \"CUP\", name: \"Cuban Peso\" },\n  { id: \"CVE\", name: \"Cape Verdean Escudo\" },\n  { id: \"CZK\", name: \"Czech Republic Koruna\" },\n  { id: \"DJF\", name: \"Djiboutian Franc\" },\n  { id: \"DKK\", name: \"Danish Krone\" },\n  { id: \"DOP\", name: \"Dominican Peso\" },\n  { id: \"DZD\", name: \"Algerian Dinar\" },\n  { id: \"EGP\", name: \"Egyptian Pound\" },\n  { id: \"ERN\", name: \"Eritrean Nakfa\" },\n  { id: \"ETB\", name: \"Ethiopian Birr\" },\n  { id: \"EUR\", name: \"Euro\" },\n  { id: \"FJD\", name: \"Fijian Dollar\" },\n  { id: \"FKP\", name: \"Falkland Islands Pound\" },\n  { id: \"GBP\", name: \"British Pound Sterling\" },\n  { id: \"GEL\", name: \"Georgian Lari\" },\n  { id: \"GGP\", name: \"Guernsey Pound\" },\n  { id: \"GHS\", name: \"Ghanaian Cedi\" },\n  { id: \"GIP\", name: \"Gibraltar Pound\" },\n  { id: \"GMD\", name: \"Gambian Dalasi\" },\n  { id: \"GNF\", name: \"Guinean Franc\" },\n  { id: \"GTQ\", name: \"Guatemalan Quetzal\" },\n  { id: \"GYD\", name: \"Guyanaese Dollar\" },\n  { id: \"HKD\", name: \"Hong Kong Dollar\" },\n  { id: \"HNL\", name: \"Honduran Lempira\" },\n  { id: \"HRK\", name: \"Croatian Kuna\" },\n  { id: \"HTG\", name: \"Haitian Gourde\" },\n  { id: \"HUF\", name: \"Hungarian Forint\" },\n  { id: \"IDR\", name: \"Indonesian Rupiah\" },\n  { id: \"ILS\", name: \"Israeli New Sheqel\" },\n  { id: \"IMP\", name: \"Manx pound\" },\n  { id: \"INR\", name: \"Indian Rupee\" },\n  { id: \"IQD\", name: \"Iraqi Dinar\" },\n  { id: \"IRR\", name: \"Iranian Rial\" },\n  { id: \"ISK\", name: \"Icelandic Króna\" },\n  { id: \"JEP\", name: \"Jersey Pound\" },\n  { id: \"JMD\", name: \"Jamaican Dollar\" },\n  { id: \"JOD\", name: \"Jordanian Dinar\" },\n  { id: \"JPY\", name: \"Japanese Yen\" },\n  { id: \"KES\", name: \"Kenyan Shilling\" },\n  { id: \"KGS\", name: \"Kyrgystani Som\" },\n  { id: \"KHR\", name: \"Cambodian Riel\" },\n  { id: \"KMF\", name: \"Comorian Franc\" },\n  { id: \"KPW\", name: \"North Korean Won\" },\n  { id: \"KRW\", name: \"South Korean Won\" },\n  { id: \"KWD\", name: \"Kuwaiti Dinar\" },\n  { id: \"KYD\", name: \"Cayman Islands Dollar\" },\n  { id: \"KZT\", name: \"Kazakhstani Tenge\" },\n  { id: \"LAK\", name: \"Laotian Kip\" },\n  { id: \"LBP\", name: \"Lebanese Pound\" },\n  { id: \"LKR\", name: \"Sri Lankan Rupee\" },\n  { id: \"LRD\", name: \"Liberian Dollar\" },\n  { id: \"LSL\", name: \"Lesotho Loti\" },\n  { id: \"LTL\", name: \"Lithuanian Litas\" },\n  { id: \"LVL\", name: \"Latvian Lats\" },\n  { id: \"LYD\", name: \"Libyan Dinar\" },\n  { id: \"MAD\", name: \"Moroccan Dirham\" },\n  { id: \"MDL\", name: \"Moldovan Leu\" },\n  { id: \"MGA\", name: \"Malagasy Ariary\" },\n  { id: \"MKD\", name: \"Macedonian Denar\" },\n  { id: \"MMK\", name: \"Myanma Kyat\" },\n  { id: \"MNT\", name: \"Mongolian Tugrik\" },\n  { id: \"MOP\", name: \"Macanese Pataca\" },\n  { id: \"MRO\", name: \"Mauritanian Ouguiya\" },\n  { id: \"MUR\", name: \"Mauritian Rupee\" },\n  { id: \"MVR\", name: \"Maldivian Rufiyaa\" },\n  { id: \"MWK\", name: \"Malawian Kwacha\" },\n  { id: \"MXN\", name: \"Mexican Peso\" },\n  { id: \"MYR\", name: \"Malaysian Ringgit\" },\n  { id: \"MZN\", name: \"Mozambican Metical\" },\n  { id: \"NAD\", name: \"Namibian Dollar\" },\n  { id: \"NGN\", name: \"Nigerian Naira\" },\n  { id: \"NIO\", name: \"Nicaraguan Córdoba\" },\n  { id: \"NOK\", name: \"Norwegian Krone\" },\n  { id: \"NPR\", name: \"Nepalese Rupee\" },\n  { id: \"NZD\", name: \"New Zealand Dollar\" },\n  { id: \"OMR\", name: \"Omani Rial\" },\n  { id: \"PAB\", name: \"Panamanian Balboa\" },\n  { id: \"PEN\", name: \"Peruvian Nuevo Sol\" },\n  { id: \"PGK\", name: \"Papua New Guinean Kina\" },\n  { id: \"PHP\", name: \"Philippine Peso\" },\n  { id: \"PKR\", name: \"Pakistani Rupee\" },\n  { id: \"PLN\", name: \"Polish Zloty\" },\n  { id: \"PYG\", name: \"Paraguayan Guarani\" },\n  { id: \"QAR\", name: \"Qatari Rial\" },\n  { id: \"RON\", name: \"Romanian Leu\" },\n  { id: \"RSD\", name: \"Serbian Dinar\" },\n  { id: \"RUB\", name: \"Russian Ruble\" },\n  { id: \"RWF\", name: \"Rwandan Franc\" },\n  { id: \"SAR\", name: \"Saudi Riyal\" },\n  { id: \"SBD\", name: \"Solomon Islands Dollar\" },\n  { id: \"SCR\", name: \"Seychellois Rupee\" },\n  { id: \"SDG\", name: \"Sudanese Pound\" },\n  { id: \"SEK\", name: \"Swedish Krona\" },\n  { id: \"SGD\", name: \"Singapore Dollar\" },\n  { id: \"SHP\", name: \"Saint Helena Pound\" },\n  { id: \"SLL\", name: \"Sierra Leonean Leone\" },\n  { id: \"SOS\", name: \"Somali Shilling\" },\n  { id: \"SRD\", name: \"Surinamese Dollar\" },\n  { id: \"STD\", name: \"São Tomé and Príncipe Dobra\" },\n  { id: \"SVC\", name: \"Salvadoran Colón\" },\n  { id: \"SYP\", name: \"Syrian Pound\" },\n  { id: \"SZL\", name: \"Swazi Lilangeni\" },\n  { id: \"THB\", name: \"Thai Baht\" },\n  { id: \"TJS\", name: \"Tajikistani Somoni\" },\n  { id: \"TMT\", name: \"Turkmenistani Manat\" },\n  { id: \"TND\", name: \"Tunisian Dinar\" },\n  { id: \"TOP\", name: \"Tongan Paʻanga\" },\n  { id: \"TRY\", name: \"Turkish Lira\" },\n  { id: \"TTD\", name: \"Trinidad and Tobago Dollar\" },\n  { id: \"TWD\", name: \"New Taiwan Dollar\" },\n  { id: \"TZS\", name: \"Tanzanian Shilling\" },\n  { id: \"UAH\", name: \"Ukrainian Hryvnia\" },\n  { id: \"UGX\", name: \"Ugandan Shilling\" },\n  { id: \"USD\", name: \"United States Dollar\" },\n  { id: \"UYU\", name: \"Uruguayan Peso\" },\n  { id: \"UZS\", name: \"Uzbekistan Som\" },\n  { id: \"VEF\", name: \"Venezuelan Bolívar Fuerte\" },\n  { id: \"VND\", name: \"Vietnamese Dong\" },\n  { id: \"VUV\", name: \"Vanuatu Vatu\" },\n  { id: \"WST\", name: \"Samoan Tala\" },\n  { id: \"XAF\", name: \"CFA Franc BEAC\" },\n  { id: \"XAG\", name: \"Silver (troy ounce)\" },\n  { id: \"XAU\", name: \"Gold (troy ounce)\" },\n  { id: \"XCD\", name: \"East Caribbean Dollar\" },\n  { id: \"XDR\", name: \"Special Drawing Rights\" },\n  { id: \"XOF\", name: \"CFA Franc BCEAO\" },\n  { id: \"XPF\", name: \"CFP Franc\" },\n  { id: \"YER\", name: \"Yemeni Rial\" },\n  { id: \"ZAR\", name: \"South African Rand\" },\n  { id: \"ZMK\", name: \"Zambian Kwacha (pre-2013)\" },\n  { id: \"ZMW\", name: \"Zambian Kwacha\" },\n  { id: \"ZWL\", name: \"Zimbabwean Dollar\" },\n];\n\nconst Forex = () => {\n  const [forex, setForex] = useState(\"\");\n  const [forexType, setForexType] = useState([]);\n  const [query, setQuery] = useState(\"\");\n  // const [type, setType] = useState(\"\");\n  // const [currency, setCurrency] = useState(\"\");\n  const [filterData, setFilterData] = useState(\"\");\n\n  // ForexAPI\n\n  const forexAPI = `http://apilayer.net/api/live?access_key=b7bf0fb87af0b9ef3ff79b78a423f76c&currencies=${filterData}&source=USD&format=1`;\n\n  const sortForex = () => {\n    const sortByName = forexList.map((chicken) => {\n      return {\n        name: chicken.name,\n      };\n    });\n    setForexType(sortByName);\n  };\n  // console.log(forexType);\n\n  useEffect(() => {\n    sortForex();\n  }, []);\n\n  const makeApiCall = async () => {\n    const res = await fetch(forexAPI);\n    const rawData = await res.json();\n\n    // console.log(rawData);\n\n    // const rawDataArray = [rawData];\n\n    // console.log(rawData.quotes);\n    setForex(rawData.quotes);\n    // console.log(forex);\n\n    // const array = rawDataArray.map((duck) => {\n    //   return {\n    //     rates: duck.quotes,\n    //   };\n    // });\n    // setQuery(array);\n  };\n  // console.log(query);\n\n  const emptyArray = [];\n\n  const displayName = forexType.map((chicken) => {\n    return emptyArray.push(chicken.name);\n  });\n\n  // const displayNameArray = [displayName];\n  // console.log(emptyArray);\n\n  // console.log(query); // state with selected currency\n\n  const handleSearchFilter = (event) => {\n    // setQuery(event);\n    const searchWord = event;\n    // console.log(searchWord);\n    const newFilter = Object.keys(forexList).reduce((result, key) => {\n      if (forexList[key].name.includes(searchWord)) {\n        result = forexList[key].id;\n      }\n      return result;\n    }, \"\");\n    setFilterData(newFilter);\n\n    // const stringData = filterData.map((element, index) => {\n    //   return `${element}`;\n    // }, \"\");\n  };\n  // console.log(filterData);\n\n  // console.log(stringData);\n  // console.log(query);\n\n  // const findId = () => {}; // use query to match forexList\n\n  // twoCalls = (e) => {\n  //   this.functionOne(e);\n  //   this.functionTwo();\n  // };\n\n  // const mappedForexData = .map((element, index) => {\n  //   return (\n  //     <>\n  //       <div key={index}>\n  //         USD: {element.price.USD}\n  //         <br />\n  //         Unit: {element.unit}\n  //       </div>\n  //     </>\n  //   );\n  // });\n\n  const forexArray = forex;\n\n  return (\n    <div>\n      <h2>Select a currency</h2>\n      <DropdownList\n        data={emptyArray}\n        // forex={forexList}\n        onChange={handleSearchFilter}\n        // onChange={(nextValue) => setQuery(nextValue)}\n        // onChange={handleSearchFilter}\n      />\n      <button onClick={makeApiCall}>Submit</button>\n      {/* <Result forex={forex} /> */}\n      {/* <div>{mappedForexData}</div>; */}\n      <div>\n        {Object.keys(forexArray).map((key, i) => (\n          <p key={i}>\n            {/* <span>1USD:{key}</span> */}\n            <span>\n              1 USD : {forexArray[key]}\n              {filterData}\n            </span>\n          </p>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Forex;\n",["67","68"],"/Users/inspireadmin/Documents/GitHub/Project_2/src/component/Crypto.js",["69","70","71"],[],"import React, { useState, useEffect } from \"react\";\nimport { DropdownList } from \"react-widgets/cjs\";\nimport tokenList from \"./TokenListApiData\";\n\nconst Crypto = (props) => {\n  // console.log(props.token);\n  // const [query, setQuery] = useState(\"\");\n  // const [type, setType] = useState(\"\");\n  // const [query, setQuery] = useState(\"\");\n  // const [otherQuery, setOtherQuery] = useState(\"\");\n  // const [name, setName] = useState(\"\");\n  // const tokenName = tokenList[i].name;\n  const [filterData, setFilterData] = useState(\"\");\n  const [tokenPrice, setTokenPrice] = useState([]);\n  const [extractedData, setExtractedData] = useState(\"\");\n\n  const cryptoAPIQuery = `https://api.coingecko.com/api/v3/simple/price?ids=${filterData}&vs_currencies=USD`;\n\n  const namesArray = [];\n  // const idArray = [];\n  // const symbolArray = [];\n  // console.log(namesArray);\n\n  const displayName = tokenList.map((chicken) => {\n    return namesArray.push(chicken.name);\n  });\n\n  const handleSearchFilter = (event) => {\n    // setQuery(event);\n    const searchWord = event;\n    // console.log(searchWord);\n    const newFilter = Object.keys(tokenList).reduce((result, key) => {\n      if (tokenList[key].name.includes(searchWord)) {\n        result = tokenList[key].id;\n        // console.log(tokenList[key].id);\n      }\n      return result;\n    }, \"\");\n    setFilterData(newFilter);\n  };\n\n  // setName = displayName;\n  // console.log(name);\n\n  // useEffect(() => {\n  // displayName();\n  // }, []);\n  // const cryptoList = [{props.token}];\n\n  const makeApiCall = async () => {\n    const res = await fetch(cryptoAPIQuery);\n    const rawData = await res.json();\n    // console.log(rawData);\n    //   const rawDataArray = [rawData];\n    //   // console.log(rawDataArray);\n    // const sortToken = tokenList.map((chicken) => {\n    //   return {\n    //     tokenPrice: chicken.usd,\n    //   };\n    // });\n    setTokenPrice(rawData);\n    console.log(rawData);\n\n    const tokenPriceArray = [rawData];\n    const obj1 = tokenPriceArray[0];\n    console.log(obj1);\n\n    const obj2 = obj1[Object.keys(obj1)[0]];\n    console.log(obj2);\n\n    const value = obj2[Object.keys(obj2)[0]];\n    console.log(value);\n    setExtractedData(value);\n  };\n\n  // console.log(tokenPrice);\n\n  // setExtractedData = value;\n  //   const filteredData = rawDataArray.map((duck) => {\n  //     return {\n  //       price: duck.data.rates,\n  //       unit: duck.data.unit,\n  //     };\n  //   });\n  //   setType(filteredData);\n\n  // console.log(tokenPrice);\n\n  // const tokenPriceArray = [tokenPrice];\n  // const obj1 = tokenPriceArray[0];\n\n  // const obj2 = obj1[Object.keys(obj1)[0]];\n  // console.log(obj2);\n\n  // const value = obj2[Object.keys(obj2)[0]];\n  // console.log(tokenPriceArray);\n\n  return (\n    <div>\n      <br />\n      <h2>Select a token</h2>\n      <DropdownList data={namesArray} onChange={handleSearchFilter} />\n      <button onClick={makeApiCall}>Submit</button>\n      {/* <Result type={type} /> */}\n      <div>Token price : ${extractedData}</div>\n    </div>\n  );\n};\n\nexport default Crypto;\n","/Users/inspireadmin/Documents/GitHub/Project_2/src/component/TokenListApiData.js",[],[],"/Users/inspireadmin/Documents/GitHub/Project_2/src/component/CryptoTicker.js",["72","73","74","75","76"],[],"import React, { useState, useEffect } from \"react\";\nimport Ticker, { FinancialTicker } from \"nice-react-ticker\";\n// import Ticker from \"react-ticker\";\nimport Bottleneck from \"bottleneck\";\nimport { type } from \"@testing-library/user-event/dist/type\";\n\nconst CryptoTicker = () => {\n  const [data, setData] = useState([]);\n  const [type, setType] = useState(\"\");\n\n  const cryptoApiTicker = `https://api.coingecko.com/api/v3/exchanges/binance/tickers`;\n\n  const limiter = new Bottleneck({\n    reservoir: 100, // initial value\n    reservoirRefreshAmount: 100,\n    reservoirRefreshInterval: 60 * 1000, // must be divisible by 250\n\n    // also use maxConcurrent and/or minTime for safety\n    maxConcurrent: 1,\n    minTime: 333, // pick a value that makes sense for your use case\n  });\n\n  //   const result = await limiter.schedule(() => makeApiCall());\n\n  useEffect(() => {\n    throttledApiCall();\n    filterData();\n  }, []);\n\n  const fetchAPI = async () => {\n    const res = await fetch(cryptoApiTicker);\n    // console.log(res);\n    const rawData = await res.json();\n    // console.log(rawData);\n    setData(rawData.tickers);\n  };\n  // console.log(data);\n\n  const filterData = () => {\n    const filteredData = data.map((element, index) => {\n      return (\n        <div key={index}>\n          symbol: {element.base}, price: {element.last}, priceBTC:{\" \"}\n          {element.converted_last.btc},\n        </div>\n      );\n    });\n    return filteredData;\n    // setType(filteredData);\n    // console.log(filteredData);\n  };\n  // console.log(type);\n\n  const throttledApiCall = limiter.wrap(fetchAPI);\n\n  // const res = await fetch(cryptoApiTicker);\n  // const rawData = await res.json();\n  // console.log(rawData);\n  // setData = rawData;\n\n  //   const fet\n  //   console.log(data);\n\n  //   const allThePromises = data.map((item) => {\n  //     return throttledApiCall();\n  //   });\n  //   const rawData = await limiter.schedule();\n\n  // const filteredData = rawData.map((element, index) => {\n  //   return {\n  //     symbol: duck.coins.symbol,\n  //     priceBtc: duck.coins.price_btc,\n  //   };\n  // });\n  // setType(filteredData);\n\n  // const filteredData = rawDataArray.map((duck) => {\n  //   return {\n  //     price: duck.data.rates,\n  //     unit: duck.data.unit,\n  //   };\n  // });\n  // setType(filteredData);\n\n  return (\n    <div>\n      <Ticker offset=\"run-in\" speed={10}>\n        {filterData()}\n      </Ticker>\n    </div>\n  );\n};\n\nexport default CryptoTicker;\n","/Users/inspireadmin/Documents/GitHub/Project_2/src/component/TokenList.js",["77","78","79","80","81","82","83","84","85"],[],"import React, { useEffect, useState } from \"react\";\n// import axios from \"axios\";\n// import TokenListApiData from \"./TokenListApiData\";\nimport Bottleneck from \"bottleneck\";\n\nconst TokenList = () => {\n  const [totalReactPackages, setTotalReactPackages] = useState(null);\n  const [state, setState] = useState(\"\");\n  const [list, setList] = useState(\"\");\n  const [data, setData] = useState([]);\n  const [type, setType] = useState(\"\");\n\n  const tickerData = \"https://api.coingecko.com/api/v3/exchanges/binance\";\n\n  const limiter = new Bottleneck({\n    reservoir: 100, // initial value\n    reservoirRefreshAmount: 100,\n    reservoirRefreshInterval: 60 * 1000,\n\n    // also use maxConcurrent and/or minTime for safety\n    maxConcurrent: 1,\n    minTime: 333, // pick a value that makes sense for your use case\n  });\n\n  useEffect(() => {\n    throttledApiCall();\n  }, []);\n\n  const makeApiCall = async () => {\n    const res = await fetch(tickerData);\n    const rawData = await res.json();\n    // console.log(rawData.tickers);\n    setData(rawData.tickers);\n  };\n  // console.log(data);\n\n  const throttledApiCall = limiter.wrap(makeApiCall);\n\n  useEffect(() => {\n    filterData();\n  }, []);\n  const filterData = () => {\n    const filteredData = data.map((duck) => {\n      return {\n        id: duck.base,\n        price: duck.last,\n      };\n    });\n    setType(filteredData);\n  };\n\n  // console.log(type);\n\n  return <div></div>;\n};\n\nexport default TokenList;\n",{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","replacedBy":"89"},{"ruleId":"86","replacedBy":"90"},{"ruleId":"88","replacedBy":"91"},{"ruleId":"92","severity":1,"message":"93","line":1,"column":27,"nodeType":"94","messageId":"95","endLine":1,"endColumn":36},{"ruleId":"92","severity":1,"message":"96","line":28,"column":10,"nodeType":"94","messageId":"95","endLine":28,"endColumn":19},{"ruleId":"92","severity":1,"message":"97","line":47,"column":9,"nodeType":"94","messageId":"95","endLine":47,"endColumn":24},{"ruleId":"92","severity":1,"message":"98","line":71,"column":9,"nodeType":"94","messageId":"95","endLine":71,"endColumn":30},{"ruleId":"92","severity":1,"message":"99","line":3,"column":8,"nodeType":"94","messageId":"95","endLine":3,"endColumn":14},{"ruleId":"92","severity":1,"message":"100","line":178,"column":10,"nodeType":"94","messageId":"95","endLine":178,"endColumn":15},{"ruleId":"92","severity":1,"message":"101","line":178,"column":17,"nodeType":"94","messageId":"95","endLine":178,"endColumn":25},{"ruleId":"92","severity":1,"message":"102","line":224,"column":9,"nodeType":"94","messageId":"95","endLine":224,"endColumn":20},{"ruleId":"86","replacedBy":"103"},{"ruleId":"88","replacedBy":"104"},{"ruleId":"92","severity":1,"message":"93","line":1,"column":27,"nodeType":"94","messageId":"95","endLine":1,"endColumn":36},{"ruleId":"92","severity":1,"message":"105","line":14,"column":10,"nodeType":"94","messageId":"95","endLine":14,"endColumn":20},{"ruleId":"92","severity":1,"message":"102","line":24,"column":9,"nodeType":"94","messageId":"95","endLine":24,"endColumn":20},{"ruleId":"92","severity":1,"message":"106","line":2,"column":18,"nodeType":"94","messageId":"95","endLine":2,"endColumn":33},{"ruleId":"92","severity":1,"message":"107","line":5,"column":10,"nodeType":"94","messageId":"95","endLine":5,"endColumn":14},{"ruleId":"92","severity":1,"message":"108","line":9,"column":10,"nodeType":"94","messageId":"95","endLine":9,"endColumn":14},{"ruleId":"92","severity":1,"message":"109","line":9,"column":16,"nodeType":"94","messageId":"95","endLine":9,"endColumn":23},{"ruleId":"110","severity":1,"message":"111","line":28,"column":6,"nodeType":"112","endLine":28,"endColumn":8,"suggestions":"113"},{"ruleId":"92","severity":1,"message":"114","line":7,"column":10,"nodeType":"94","messageId":"95","endLine":7,"endColumn":28},{"ruleId":"92","severity":1,"message":"115","line":7,"column":30,"nodeType":"94","messageId":"95","endLine":7,"endColumn":51},{"ruleId":"92","severity":1,"message":"116","line":8,"column":10,"nodeType":"94","messageId":"95","endLine":8,"endColumn":15},{"ruleId":"92","severity":1,"message":"117","line":8,"column":17,"nodeType":"94","messageId":"95","endLine":8,"endColumn":25},{"ruleId":"92","severity":1,"message":"118","line":9,"column":10,"nodeType":"94","messageId":"95","endLine":9,"endColumn":14},{"ruleId":"92","severity":1,"message":"119","line":9,"column":16,"nodeType":"94","messageId":"95","endLine":9,"endColumn":23},{"ruleId":"92","severity":1,"message":"108","line":11,"column":10,"nodeType":"94","messageId":"95","endLine":11,"endColumn":14},{"ruleId":"110","severity":1,"message":"120","line":27,"column":6,"nodeType":"112","endLine":27,"endColumn":8,"suggestions":"121"},{"ruleId":"110","severity":1,"message":"122","line":41,"column":6,"nodeType":"112","endLine":41,"endColumn":8,"suggestions":"123"},"no-native-reassign",["124"],"no-negated-in-lhs",["125"],["124"],["125"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'commodity' is assigned a value but never used.","'consolidatedAPI' is assigned a value but never used.","'handleSelectionChange' is assigned a value but never used.","'Result' is defined but never used.","'query' is assigned a value but never used.","'setQuery' is assigned a value but never used.","'displayName' is assigned a value but never used.",["124"],["125"],"'tokenPrice' is assigned a value but never used.","'FinancialTicker' is defined but never used.","'type' is defined but never used.","'type' is assigned a value but never used.","'setType' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'filterData' and 'throttledApiCall'. Either include them or remove the dependency array.","ArrayExpression",["126"],"'totalReactPackages' is assigned a value but never used.","'setTotalReactPackages' is assigned a value but never used.","'state' is assigned a value but never used.","'setState' is assigned a value but never used.","'list' is assigned a value but never used.","'setList' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'throttledApiCall'. Either include it or remove the dependency array.",["127"],"React Hook useEffect has a missing dependency: 'filterData'. Either include it or remove the dependency array.",["128"],"no-global-assign","no-unsafe-negation",{"desc":"129","fix":"130"},{"desc":"131","fix":"132"},{"desc":"133","fix":"134"},"Update the dependencies array to be: [filterData, throttledApiCall]",{"range":"135","text":"136"},"Update the dependencies array to be: [throttledApiCall]",{"range":"137","text":"138"},"Update the dependencies array to be: [filterData]",{"range":"139","text":"140"},[914,916],"[filterData, throttledApiCall]",[859,861],"[throttledApiCall]",[1175,1177],"[filterData]"]